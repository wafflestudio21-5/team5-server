name: CI/CD using github actions & docker

# event trigger
on:
  push:
    branches: [ "main", "feat/deploy" ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      # Test
      - name: Checkout
        uses: actions/checkout@v4

      # https://github.com/actions/setup-java?tab=readme-ov-file#eclipse-temurin
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Test with Gradle
        run: ./gradlew test

      - name: Check ktlint
        run: ./gradlew ktlintCheck

      - name: Build with Gradle
        run: ./gradlew build -x test

      # docker build & push
      - name: Docker build & push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/waffle5gram .
          docker push ${{ secrets.DOCKER_USERNAME }}/waffle5gram

      ## deploy to EC2
#      - name: Deploy
#        uses: appleboy/ssh-action@v1.0.2
#        with:
#          host: ${{ secrets.HOST }} # EC2 퍼블릭 IPv4 DNS
#          username: ${{ secrets.USERNAME }}
#          key: ${{ secrets.PRIVATE_KEY }}
#          script_stop: true
#          script: |
#            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/waffle5gram
#            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/waffle5gram
#            sudo docker image prune -f

      # Set up SSH keys
      - name: Add SSH keys
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRIVATE_KEY }}

      # Deploy to EC2
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST }} << EOF
            cd /home/ubuntu/waffle5gram
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/waffle5gram
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/waffle5gram
            sudo docker image prune -f
          EOF
